---
- name: Agent (machine) install & configuration
  block:
    - name: Install Crowdsec
      block:
        - name: Add crowdsec key
          ansible.builtin.apt_key:
            keyring: /etc/apt/trusted.gpg.d/crowdsec_crowdsec-archive-keyring.gpg
            url: https://packagecloud.io/crowdsec/crowdsec/gpgkey
            state: present
        - name: Add crowdsec apt deb repository
          ansible.builtin.apt_repository:
            filename: crowdsec_crowdsec
            repo: deb [signed-by=/etc/apt/trusted.gpg.d/crowdsec_crowdsec-archive-keyring.gpg] https://packagecloud.io/crowdsec/crowdsec/ubuntu {{ ansible_distribution_release }} main
            state: present
        - name: Add crowdsec apt deb-src repository
          ansible.builtin.apt_repository:
            filename: crowdsec_crowdsec
            repo: deb-src [signed-by=/etc/apt/trusted.gpg.d/crowdsec_crowdsec-archive-keyring.gpg] https://packagecloud.io/crowdsec/crowdsec/ubuntu {{ ansible_distribution_release }} main
            state: present
        - name: Install crowdsec packages
          ansible.builtin.apt:
            name: crowdsec
            state: present
            update_cache: true
        - name: Install cscli bash completion
          ansible.builtin.shell: |
            set -o pipefail
            cscli completion bash | tee /etc/bash_completion.d/cscli
          register: bash_completion_result
          changed_when: "'# bash completion for' not in bash_completion_result.stdout"
          failed_when: "'Error' in bash_completion_result.stderr"

    - name: Install bouncers
      ansible.builtin.apt:
        name: "{{ cs_bouncers | default([]) }}"
        state: present
        update_cache: true
      when: cs_bouncers | length > 0

    - name: Install collections
      # become: true
      ansible.builtin.command: cscli collections install {{ item }}
      with_items: "{{ cs_collections }}"
      when: cs_collections | length > 0

    - name: Install parsers
      # become: true
      ansible.builtin.command: cscli parsers install {{ item }}
      with_items: "{{ cs_parsers }}"
      when: cs_parsers | length > 0

    - name: Install postoverflows
      # become: true
      ansible.builtin.command: cscli postoverflows install {{ item }}
      with_items: "{{ cs_postoverflows }}"
      when: cs_postoverflows | length > 0

    - name: Install scenarios
      # become: true
      ansible.builtin.command: cscli scenarios install {{ item }}
      with_items: "{{ cs_scenarios }}"
      when: cs_scenarios | length > 0

    - name: Configure
      block:
        - name: Main config
          ansible.builtin.template:
            src: config.yaml.j2
            dest: "{{ cs_config_file_base }}/config.yaml"
            owner: root
            group: root
            mode: 0644
        - name: Set service
          ansible.builtin.template:
            src: service.j2
            dest: "/etc/systemd/system/crowdsec.service"
            owner: root
            group: root
            mode: 0644
        - name: Set whitelist
          ansible.builtin.template:
            src: whitelist.yaml.j2
            dest: "{{ cs_config_file_base }}/parsers/s02-enrich/local-whitelist.yaml"
            owner: root
            group: root
            mode: 0644
          when: (cs_whitelist_ip | length > 0) or (cs_whitelist_cidr | length > 0)
        - name: Watch services via Journalctl
          ansible.builtin.blockinfile:
            path: "{{ cs_config_file_base }}/acquis.yaml"
            insertafter: EOF
            block: |
              ---
              source: journalctl
              journalctl_filter:
                - "_SYSTEMD_UNIT=ssh.service"
              labels:
                type: journald"
              ---
            backup: true
        - name: Flush handlers to apply config
          ansible.builtin.meta: flush_handlers

- name: Enroll instance to web console
  ansible.builtin.command: cscli console enroll --name {{ inventory_hostname }} {{ cs_token }}
  when:
    - cs_token is defined
    - not cs_multiserver
