---
- name: Agent (machine) install & configuration
  block:
    - name: Install Crowdsec
      block:
        - name: Create a directory if it does not exist
          ansible.builtin.file:
            path: /etc/apt/keyrings
            state: directory
            mode: "0755"
        - name: Add crowdsec key
          ansible.builtin.shell: |
            curl -fsSL https://packagecloud.io/crowdsec/crowdsec/gpgkey | gpg --dearmor > /etc/apt/keyrings/crowdsec_crowdsec-archive-keyring.gpg
        - name: Add crowdsec apt repository
          ansible.builtin.apt_repository:
            repo: deb https://packagecloud.io/crowdsec/crowdsec/ubuntu/ {{ ansible_distribution_release }} main
            state: present
            filename: crowdsec
        - name: Add crowdsec src repository
          ansible.builtin.apt_repository:
            repo: deb-src https://packagecloud.io/crowdsec/crowdsec/ubuntu/ {{ ansible_distribution_release }} main
            state: present
            filename: crowdsec-src
            update_cache: true
        - name: Install crowdsec packages
          ansible.builtin.apt:
            name: crowdsec
            state: present
            update_cache: true
        - name: crowdsec - cscli bash completion
          # ansible.builtin.shell: "cscli completion bash | sudo tee /etc/bash_completion.d/cscli"
          ansible.builtin.shell: "cscli completion bash | tee /etc/bash_completion.d/cscli"
          register: bash_completion_result
          changed_when: "'# bash completion for' not in bash_completion_result.stdout"
          failed_when: "'Error' in bash_completion_result.stderr"

    - name: Install bouncers
      ansible.builtin.apt:
        name: "{{ cs_bouncers | default([]) }}"
        state: present
        update_cache: true
      when: cs_bouncers | length > 0

    - name: Install collections
      # become: true
      ansible.builtin.command: "cscli collections install {{ item }}"
      with_items: "{{ cs_collections }}"
      when: cs_collections | length > 0

    - name: Install parsers
      # become: true
      ansible.builtin.command: "cscli parsers install {{ item }}"
      with_items: "{{ cs_parsers }}"
      when: cs_parsers | length > 0

    - name: Install postoverflows
      # become: true
      ansible.builtin.command: "cscli postoverflows install {{ item }}"
      with_items: "{{ cs_postoverflows }}"
      when: cs_postoverflows | length > 0

    - name: Install scenarios
      # become: true
      ansible.builtin.command: "cscli scenarios install {{ item }}"
      with_items: "{{ cs_scenarios }}"
      when: cs_scenarios | length > 0

    - name: Configure
      block:
        - name: Main config
          ansible.builtin.template:
            src: config.yaml.j2
            dest: "{{ cs_config_file_base }}/config.yaml"
            owner: root
            group: root
            mode: 0644
        - name: Set whitelist
          ansible.builtin.template:
            src: whitelist.yaml.j2
            dest: "{{ cs_config_file_base }}/parsers/s02-enrich/local-whitelist.yaml"
            owner: root
            group: root
            mode: 0644
          when: (cs_whitelist_ip | length > 0) or (cs_whitelist_cidr | length > 0)
        - name: Watch services via Journalctl
          blockinfile:
            path: "{{ cs_config_file_base }}/acquis.yaml"
            insertafter: EOF
            block: |
              ---
              source: journalctl
              journalctl_filter:
                - "_SYSTEMD_UNIT=ssh.service"
              labels:
                type: journald"
              ---
            backup: true
        - name: Flush handlers to apply config
          meta: flush_handlers

- name: Enroll instance to web console
  ansible.builtin.command: "cscli console enroll --name {{ inventory_hostname }} {{ cs_token }}"
  when:
    - cs_token is defined
    - not cs_multiserver
